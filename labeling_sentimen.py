# -*- coding: utf-8 -*-
"""Labeling Sentimen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSniBgqWEeimV2m2_Xqr0J2HAzqrMgUZ
"""

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
nltk.download("vader_lexicon")
import pandas as pd
data = pd.read_csv("clean_dataset_mobil_listrik.csv")
data = data.dropna()
print(data.head())

data = pd.read_csv("clean_dataset_mobil_listrik.csv")
data





!pip install translate

data = pd.read_csv("clean_dataset_mobil_listrik.csv")
data.head()

from translate import Translator

def convert_eng(tweet):
  translator = Translator(to_lang="en", from_lang="id")
  translation = translator.translate(tweet)
  return translation

data['tweet_english'] = data['full_text'].apply(convert_eng)
data.to_csv("clean_mobil_listik_labeling.csv")

data = pd.read_csv("dataset_mobil_listrik_labeling_sentimen_copy.csv", index_col=0)
data.head()

data = pd.read_csv("dataset_mobil_listrik_labeling_sentimen_copy.csv", index_col=0)
data

!pip install tweet-preprocessor
!pip install textblob
!pip install wordcloud
!pip install nltk

import preprocessor as p
from textblob import TextBlob
import nltk
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

nltk.download('punkt')

data = pd.read_csv("dataset_mobil_listrik_labeling_sentimen_copy.csv", index_col=0)
data.head()

# data_tweet = list(data['tweet_english'])
# polaritas = 0

# status = []
# total_positif = total_negatif = total_netral = total = 0

# for i, tweet in enumerate(data_tweet):
#   analysis = TextBlob(tweet)
#   polaritas += analysis.polarity

#   if analysis.sentiment.polarity > 0.0:
#     total_positif += 1
#     status.append('Positif')
#   elif analysis.sentiment.polarity == 0.0:
#     total_netral += 1
#     status.append('Netral')
#   else :
#     total_negatif += 1
#     status.append('Negatif')

#   total += 1

# print(f'Hasil Analisis Data:\nPositif ={total_positif}\nNetral = {total_netral}\nNegatif ={total_negatif}')
# print(f'\nTotal Data : {total}')

# from textblob import TextBlob

# data_tweet = list(data['tweet_english'])
# polaritas = 0

# status = []
# total_positif = total_negatif = total_netral = total = 0
# scores = []

# for i, tweet in enumerate(data_tweet):
#     analysis = TextBlob(tweet)
#     polaritas += analysis.polarity
#     scores.append(analysis.polarity)

#     if analysis.sentiment.polarity > 0.0:
#         total_positif += 1
#         status.append('Positif')
#     elif analysis.sentiment.polarity == 0.0:
#         total_netral += 1
#         status.append('Netral')
#     else:
#         total_negatif += 1
#         status.append('Negatif')

#     total += 1

# data['Score'] = scores

# print(f'Hasil Analisis Data:\nPositif = {total_positif}\nNetral = {total_netral}\nNegatif = {total_negatif}')
# print(f'\nTotal Data: {total}')

# from textblob import TextBlob

# # Misalkan 'data_tweet' dan 'data' telah didefinisikan sebelumnya
# data_tweet = list(data['tweet_english'])
# polaritas = 0

# status = []
# total_positif = total_negatif = total_netral = total = 0

# # Dictionary untuk menyimpan tweet dan skor masing-masing
# tweet_scores = {}

# for i, tweet in enumerate(data_tweet):
#     analysis = TextBlob(tweet)
#     polaritas += analysis.polarity

#     # Menyimpan skor untuk masing-masing tweet
#     tweet_scores[tweet] = analysis.polarity

#     if analysis.sentiment.polarity > 0.0:
#         total_positif += 1
#         status.append('Positif')
#     elif analysis.sentiment.polarity == 0.0:
#         total_netral += 1
#         status.append('Netral')
#     else:
#         total_negatif += 1
#         status.append('Negatif')

#     total += 1

# print('Hasil Analisis Data:')
# print(f'Positif = {total_positif}')
# print(f'Netral = {total_netral}')
# print(f'Negatif = {total_negatif}')
# print(f'\nTotal Data : {total}')

# # # Menampilkan skor untuk masing-masing tweet
# # print('\nSkor untuk masing-masing tweet:')
# # for tweet, score in tweet_scores.items():
# #     print(f'Tweet: {tweet} - Skor: {score}')

from textblob import TextBlob

data_tweet = list(data['tweet_english'])
polarity_scores = []

status = {'Positif': 0, 'Netral': 0, 'Negatif': 0}

for tweet in data_tweet:
    analysis = TextBlob(str(tweet))
    polarity = analysis.sentiment.polarity
    polarity_scores.append(polarity)

    if polarity > 0.0:
        status['Positif'] += 1
    elif polarity == 0.0:
        status['Netral'] += 1
    else:
        status['Negatif'] += 1

data['Score'] = polarity_scores

total = sum(status.values())

print(f'Hasil Analisis Data:\nPositif = {status["Positif"]}\nNetral = {status["Netral"]}\nNegatif = {status["Negatif"]}')
print(f'\nTotal Data: {total}')

data ['sentimen'] = status
data
data.to_csv("dataset_mobil_listrik_labeling_sentimen.csv")

data['full_text'] = data['full_text'].str.lower()
data

!pip install sastrawi

import Sastrawi
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory, StopWordRemover, ArrayDictionary
more_stop_words = ['tidak']

stop_words = StopWordRemoverFactory().get_stop_words()
stop_words.extend(more_stop_words)

new_array = ArrayDictionary(stop_words)
stop_words_remover_new = StopWordRemover(new_array)

def stopword(str_text):
  str_text = stop_words_remover_new.remove(str_text)
  return str_text

data['full_text'] = data['full_text'].apply(lambda x :stopword(x))
data.head()

data['tweet_english'] = data['tweet_english'].str.lower()
data

data = pd.read_csv("data_set_mobil_listrik_pre.csv", index_col=0)

tokenized = data['full_text'].apply(lambda x:x.split())
tokenized

from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
import pandas as pd

def stemming(text_cleaning):
    factory = StemmerFactory()
    stemmer = factory.create_stemmer()
    do = []
    for w in text_cleaning:
        data = stemmer.stem(w)
        do.append(data)
    d_clean = " ".join(do)
    return d_clean

tokenized = tokenized.apply(stemming)

tokenized.to_csv("data_set_mobil_listrik_pre.csv", index=False)
data = pd.read_csv("data_set_mobil_listrik_pre.csv", encoding='latin1')

data = pd.read_csv("data_set_mobil_listrik_pre.csv")
data

data = pd.read_csv("data_set_mobil_listrik_pre.csv")
data

from textblob import TextBlob

# Misalkan 'data_tweet' dan 'data' telah didefinisikan sebelumnya
data_tweet = list(data['tweet_english'])
polaritas = 0

status = []
total_positif = total_negatif = total_netral = total = 0

# Dictionary untuk menyimpan tweet dan skor masing-masing
tweet_scores = {}

for i, tweet in enumerate(data_tweet):
    analysis = TextBlob(tweet)
    polaritas += analysis.polarity

    # Menyimpan skor untuk masing-masing tweet
    tweet_scores[tweet] = analysis.polarity

    if analysis.sentiment.polarity > 0.0:
        total_positif += 1
        status.append('Positif')
    elif analysis.sentiment.polarity == 0.0:
        total_netral += 1
        status.append('Netral')
    else:
        total_negatif += 1
        status.append('Negatif')

    total += 1

print('Hasil Analisis Data:')
print(f'Positif = {total_positif}')
print(f'Netral = {total_netral}')
print(f'Negatif = {total_negatif}')
print(f'\nTotal Data : {total}')

data ['sentimen'] = status
data

data = pd.read_csv("dataset_mobil_listrik_labeling_sentimen_clean.csv",index_col=0)
data

import pandas as pd
import matplotlib.pyplot as plt
from nltk.sentiment import SentimentIntensityAnalyzer

# Load data dari CSV ke dalam DataFrame
data = pd.read_csv("dataset_mobil_listrik_labeling_sentimen_clean.csv", index_col=0)

# Inisialisasi SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Hitung sentimen untuk masing-masing data
sentimen = data['full_text'].apply(lambda x: sia.polarity_scores(x)['compound'])

# Kategorisasi sentimen berdasarkan threshold
data['label_vader'] = sentimen.apply(lambda x: 'Positif' if x >= 0.05 else ('Negatif' if x <= -0.05 else 'Netral'))

# Hitung jumlah data untuk masing-masing label
status = data['label_vader'].value_counts()

# Hitung persentase data untuk masing-masing label
total_data = len(data)
persentase = [999/total_data * 100, 670/total_data * 100, 200/total_data * 100]  # Sesuaikan dengan persentase yang dimiliki

# Warna untuk masing-masing bar
colors = ['#55AC45', '#4A90E2', '#E24A4A']

# Plot bar chart
plt.bar(status.index, persentase, color=colors)

# Atur label sumbu x dan y
plt.xlabel('Sentimen')
plt.ylabel('Persentase')

# Tampilkan nilai persentase di atas setiap bar
for i, val in enumerate(persentase):
    plt.text(i, val, f'{val:.1f}%', ha='center', va='bottom')

# Tampilkan plot bar chart
plt.show()